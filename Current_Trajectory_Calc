import numpy as np
import pandas as pd

# Example Data
SD0 = np.array([0, 0, 0, 180, 180, 90, 90, 90, 270, 270, 270])
Curi = np.arange(-7.2, 9, 1.6)
Curj = np.arange(-6.6, 6.6, 1.2)
WS = np.arange(50, 61, 1)
WSFactor = 0.23330174335497916

# Build Dataset
df = pd.DataFrame({'SD0': SD0, 'Curi': Curi, 'Curj': Curj, 'WS': WS})

Build = []

# Loop that calcuates how far SD travels based on currents for each direction (uses basis geometry)
i = 0
for x, y, z in zip(SD0, Curi, Curj):
    if (x == 0 or 180) and (0 <= x + y <= 15 or 165 <= x + y <= 180):
        ang = SD0[i] + np.arcsin((Curj[i]/(WS[i]*WSFactor)))
        AD = (Curj[i]/np.tan(ang)) + Curi[i]
        Build += [AD]
    elif (x == 0 or 180) and (-15 <= x + y <= 0 or 180 <= x + y <= 195):
        ang = SD0[i] + np.arcsin((Curj[i] / (WS[i] * WSFactor)))
        AD = (Curj[i] / np.tan(ang)) - Curi[i]
        Build += [AD]
    elif (x == 90 or 270) and (90 <= x + z <= 105 or 255 <= x + z <= 270):
        ang = SD0[i] - np.arcsin((Curi[i] / (WS[i] * WSFactor)))
        AD = (Curi[i] * np.tan(ang)) + Curj[i]
        Build += [AD]
    elif (x == 90 or 270) and (75 <= x + z <= 90 or 270 <= x + z <= 285):
        ang = SD0[i] - np.arcsin((Curi[i] / (WS[i] * WSFactor)))
        AD = (Curi[i] * np.tan(ang)) - Curj[i]
        Build += [AD]
    else:
        print(WS)
    i = i + 1

# Final SD Dist Array
Build = np.array(Build)
